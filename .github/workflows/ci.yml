name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          IMAGE_URI="${{ secrets.IMAGE_URI }}"
          IMAGE_TAG="${{ github.run_number }}"
          docker build -t $IMAGE_URI:$IMAGE_TAG .

      - name: Scan local image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: "${{ secrets.IMAGE_URI}}:${{ github.run_number }}"
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Push Docker Image to ECR
        run: |
          IMAGE_URI="${{ secrets.IMAGE_URI }}"
          IMAGE_TAG="${{ github.run_number }}"
          docker push $IMAGE_URI:$IMAGE_TAG
          docker tag $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

  deploy:
    needs: build-and-scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fill in the new image ID in the ECS task definition
        run: |
          IMAGE_URI="${{ secrets.IMAGE_URI }}"
          IMAGE_TAG="${{ github.run_number }}"
          sed -i "s|<IMAGE_URI>:<TAG>|$IMAGE_URI:$IMAGE_TAG|" ecs-taskdef.json

      - name: Ensure ECS cluster exists
        run: |
          CLUSTER_NAME="${{ vars.ECS_CLUSTER }}"

          CLUSTER_EXISTS=$(aws ecs describe-clusters \
            --clusters $CLUSTER_NAME \
            --query "clusters[0].status" \
            --output text)

          if [ "$CLUSTER_EXISTS" == "None" ] || [ -z "$CLUSTER_EXISTS" ]; then
            echo "Cluster does not exist. Creating cluster..."
            aws ecs create-cluster --cluster-name $CLUSTER_NAME
          else
            echo "Cluster already exists. Skipping creation."
          fi

      - name: Ensure ECS service exists
        run: |
          CLUSTER_NAME="${{ vars.ECS_CLUSTER }}"
          SERVICE_NAME="${{ vars.ECS_SERVICE }}"
          TASK_DEF="ecs-taskdef.json"

          SERVICE_EXISTS=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query "services[0].status" \
            --output text)

          if [ "$SERVICE_EXISTS" == "None" ] || [ -z "$SERVICE_EXISTS" ]; then
            echo "Service does not exist. Creating service..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_DEF \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-12345,subnet-67890],securityGroups=[sg-12345],assignPublicIp=ENABLED}" \
              --deployment-controller "type=ECS"
          else
            echo "Service already exists. Skipping creation."
          fi

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-taskdef.json
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true
